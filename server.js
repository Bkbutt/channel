const express = require("express");
const app = express();
const https = require('https');
const axios = require('axios');
const url = require('url');
const user = require('./routes/auth')
// require('dotenv').config();
// require("./db/conn");
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/',user);
require('dotenv').config({path:'./.env'})
const connect = require('./db/conn');
connect();
const port = process.env.PORT || 8000;
let urlNum ="";
//calling get api using axios
async function fetchData(){
  try{
    const response =await axios.get("http://127.0.0.1:8000/user/64783046b9b539aed612fb4f");
    console.log('API response:',response.data);
    urlNum = response.data.user.urlNo;
    console.log('urlNum is:',urlNum);
    

  }catch(error){
    console.log("API error",error);
  }
 }
 fetchData();



// Set CORS headers for all requests
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3000');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Cookie');

  // Handle preflight OPTIONS requests
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
    return;
  }

  next();
});

// Handle GET request to the first API Agoda for RoomList
app.get('/get-api', (req, res) => {
  const proxyUrl = `https://ycs.agoda.com/en-us/${urlNum}/kipp/api/roomtype/GetRoomList?recStatus=1,0`;
  const options = url.parse(proxyUrl);

  // Set the necessary headers, including the "Cookie" header
  options.headers = {
    Cookie: ' agoda.user.03=UserId=5972ed5f-cf51-4f40-9c24-f8a5ca374bd3; agoda.prius=PriusID=0&PointsMaxTraffic=Agoda; agoda.version.03=CookieId=9b0aaaee-860d-46f0-8a8b-00deb0d0df89&TItems=2$1844104$05-04-2023 16:27$06-03-2023 16:27$&DLang=en-us&CurLabel=PKR; agoda.firstclicks=1844104||||2023-05-04T16:27:40||irmctgzxn3efi52dhewdc3v1||{"IsPaid":false,"gclid":"","Type":""}; agoda.lastclicks=1844104||||2023-05-04T16:27:40||irmctgzxn3efi52dhewdc3v1||{"IsPaid":false,"gclid":"","Type":""}; agoda.landings=1844104|||irmctgzxn3efi52dhewdc3v1|2023-05-04T16:27:40|False|19----1844104|||irmctgzxn3efi52dhewdc3v1|2023-05-04T16:27:40|False|20----1844104|||irmctgzxn3efi52dhewdc3v1|2023-05-04T16:27:40|False|99; agoda.attr.03=ATItems=1844104$05-04-2023 16:27$; agoda.consent=PK||2023-05-04 16:27:42Z; ga=GA1.2.1477075086.1683192539; _uetvid=19150fc0ea5e11ed85c2378aa0d1b986; ftr_ncd=6; _fbp=fb.1.1683192538998.874461038; rskxRunCookie=0; rCookie=351snjgvv6c19ok7di5obxjlh8xdnc1; lastRskxRun=1683192539236; forterToken=05259d9309a347f2a1fe7cbc2d12fe59_1683192538431_UDF43-m4_9ck; ai_user=yQmCGh98JJ0UgZ5MwJRpPx|2023-05-16T07:42:44.826Z; UserName=barakcontinentz@gmail.com; LoginRememberMe=True; LoginKeepMeSignedIn=True; mfau={"986D269142015057E1C481986BE8B404":["6ABAEFB1DF69127F59E7891A26462BBE"]}; loggedInProfileHistory=[{"email":"barakcontinentz@gmail.com","avatarId":"AGJ001","logInTime":"2023-05-16T07:43:18.156Z","loginFlowState":3}]; countrySelection=; ab.storage.userId.a73da5f8-ee6e-401e-974a-488ed7de6d1c=%7B%22g%22%3A%2239578023-532A3F12-54D0-4EAC-ABB4-82759ED27D10%22%2C%22c%22%3A1684223007993%2C%22l%22%3A1684223007993%7D; ab.storage.deviceId.a73da5f8-ee6e-401e-974a-488ed7de6d1c=%7B%22g%22%3A%228f6edadf-0460-5a8a-b22a-ba727dfd1f97%22%2C%22c%22%3A1684223007997%2C%22l%22%3A1684223007997%7D; _ab50group=GroupB; _40-40-20Split=Group40B; utag_main=v_id:0187e617d7bd00190248da31a2b20506f017b06700978$_sn:2$_se:2$_ss:0$_st:1684234389912$_pn:2%3Bexp-session$ses_id:1684232524578%3Bexp-session; ab.storage.sessionId.a73da5f8-ee6e-401e-974a-488ed7de6d1c=%7B%22g%22%3A%226694f0d4-d5c3-f84e-415e-f5e415244f03%22%2C%22e%22%3A1684312206503%2C%22c%22%3A1684310406493%2C%22l%22%3A1684310406503%7D; APSXYCS40=16C354198EB85E8179A99226A8CE27F9A6AE93589D25FDC7366B19EA637075AA0ADEAD34466CC5BB70C2C4E2412A1CFDCB5C6F821ED16A51FDCD989FDBECF8289E674D3C9D4C753EB0DA76D987DD1AEDD84B4294996D605744273F3DCA43AD2925982AFD6C066CFC44B5A30A84CE37FD53A1F72925B3459C85848C7E678D1160EDB917651184619F11AD69EDEB50051D4FC42A0523E0D877F8AE7B20580FC375C6D179D4768FEFD8967D6FFD34FD982B28CBB757991B3613CBE31A2C2F104FDE43EF0732787B78D7706A23B5C6CED42D1BA2C025DD9E838D193A463903FEE0A9C3A0246917C5B1947B570D293F5AC595055681E92E309045C500F528B16AF747A683C1BCC5E44C3BF1C1B5C4D79B59BEEF43F62D86371DE6A5FF8FA7ABB5DDE42A8BC999192C243C80EC346AED8B54277D23E5A0D685C0A33B2435ADB78802E750C6A20DAC6EE4C9AD5DFB496830AFEE415058F1C6636CE117F02CD27C5800DEA94DC797E48BD6059BBFFA340A64FA6CD04C49FEEE9AD8A8790532728C9455EAC11055CC2203EA70F3B32EA3D7451DD3D31E5A61C247481E871224FFE184FA7F12714F68E0F12B524BAB0755C2FE19E24B4152EF705836E7CF083AA27C8EE4EB6F7620265A014F7BBCE34CEA8072F1A7A2449FDCF6A6E6B12B4985EA188C84CA6902D7A38DF10294529EA6191742AA89AEB5874267B61B37766520D654096E7B8248F4D6966B4D475045282D81BCD29A5E0072DF3FA2E0D57D196F7343A2ABD0C0C836E78BA070CF3594E0B3E16F6A36CDE8975964FA81C8A87CC31090CBFFA62C910783049797D26411B7D01909AFAEBC9458DBF6B8F7C80C22B3C3B0281A38AA10E1C6990E14A629E110AE7580BB7EC8F0F4C959DA5F9F184DDCC15E71EE8B391BDA87EE232AC3C76944C9CDD3821CEC06D9481A975A409F14CA340E4E3DCDE8AE177D9A44578F88B8C382D332CD577E5B4CFA9F64D0384C0FFED419FED6C2F4CB9518F7CD6BE12FD171593A7CEEF23F52F20E1B276A644CABBB5A65F09D3E6FD23EEA98C5437C5FB6730D1A95958C7653C92AF127E4C8609B5EE00687B230552CC36B07C030C62639D3E75C203CE827D860349819D1953E2CADAA1D5770E665F2DA407C8F5BDDA9A28E5E32D331E10FA9964365DDBF985BCD63D1CCE11CFB7B557994936ED658BA945671CA1A649E2C331B35F167562792DD5E2AE72495497CAD713AB8AF00F1CF5DCE8A5D5A778548F09D61BEF30034B0D3FF0D190AC6E3797A8B00E7947D9063DB55D9E697CA6142DFB0889D439867DEFC32BD24A8873019328366EC9146CF752AB53A41F92C829D8C9F7D0301AEA34E0EB352F1109B9F62417DAF6B6320EC41411CA49270004729BCF9963A320F4DFFD995CD56CAB2E711A29D33CE92869D90C3FF25FCBCEFF4CE4B4153913A89ACD6A77165415C21941FE5D77966D2AEDFD29B8BA509B8CAC682002CF67FB38F0C07044D04C1324B54DE2D3E2B1FB19237E7DA1976CC89A1E17686B0CDB5D1FB3F9D86313ECCA938844D0117E1BBD4EDBF2C61D1C6F0B4E1A20DC1D1809AEDEF8EE2A2DDF7601E1C30D03C3E71165269D7D48DE2634771AEE9FE1A91ACB789AADFBAC2770743A902B31AF01D78C8F920B0E72FA703CD8BAB7D9E30D8AE69AAA15FE3F8F54DB478BE5BE364FDC0316DE0AC6D378AE9CC13FF26B39AC005ECCE5FF1E45F06AFD4BBF8F132E8F2965C0681E9B96690E7F864D0B5186E456AD131D77336B5EA47BBD16C9A39CA0C04831C01867977B6CF685B2941D41E1BCB445B487B9D1B3ACB4D16A98D1CC66AAFFD935F2C8D2260BF10AE2C1EDB76154315441FB0742119C0B43E32F2EFF0236E6B71D84A27E9342B20498F097874D92A5FBE035F8C4D3CF943A3E3EFDBEC6D8CFD9C02629AE934B094BD70D5C725F7DD342A5123451A4AA4131779DBC25D98C9A7552C64C4AF3CB829E392EFBB237F5CCC1061B0486C12A56DBF522DC5CED40BB287D3E9FF82F4EAF2398EE696B066074EFB53FD2103D4165FA41E274A212C475D45BAF1E6A30D4331F2F1D56B9702F8DA8D1D6352664BA1BC7714698FB552EFA3AA0C0A0CF3D5702A794AA0EECED398B7707CF55192B4AA60488D280950C5529D40FF3CBC5451D9AAED58BFF71FA4B6737BBD21AE7E8C33DF761C38ED33769D2810C8ACEFC4413ED75D1F6A8171B74A81D36D65332028997A42AB6891AFBC15B8E8B7B84D3C38BB42A018214CAA8B6B58EF33D153C8B48BD8F6093BA8408566D189900C235DDA14A9A878FFEB3A1C64408FA36C716C753B010010573F8F7A8AACB32805B546FF0F2168B554C88B9B26B7DC9FEAF466E332E98DA27597FB5DC02242F53FA9DAABC09AE818C6CE3D42700BB5902807F10DD348EC125C9781B1859686427B0E45B1F65B797A85E5AD12BCB02807694375FA89539D6D43481BA8BFD68CC5B173630B22FC1AC296745D6C477E2BA744AD11F83E589F27D231E1F17F3E4CE530493224F2A301000F983FD98F5FCA0E0523AA331FB094AC636D197E032BE812EA3ADC82FA90E6DECEC952CF42B8575DB23D3FEAA4BB3AE5132A987C01A45E536BAA7939D24FD071F9E980B5A9B4D200CE503C57621C0EDF5E202A89A4DA59B8FD24194A72BCE0676EA2DED76C7B0CFBE45278B692CB7AC9EEA888F634; tokenp=eyJhbGciOiJFUzI1NiJ9.eyJtIjozMTU1NDY2NDIsInIiOlsiMTMwXzM5NTc4MDIyIiwiNTVfMzk1NzgwMjMiLCIyMjBfMzk1NzgwMjMiLCIyMzBfMzk1NzgwMjIiLCIyMzBfMzk1NzgwMjMiXSwiZSI6ImJFK0lZZChtRGc5XFxJI3I9TD0_W1ZCNG80cixIak8zVC9Ta204TVwiRXJdWVhpT2E1QFRaWzA-OXMvYzFqNSMvWUtMJT5yb1thQjMhPS9tPHAiLCJzcmMiOiJzcmMiLCJzdWIiOiJVeW9fRWxUUVRxeXJ0SUoxbnRKOUVBIiwianRpIjoiWExtUnNDRDJSZG1sSUhXQzlKYmd4ZyIsImlhdCI6MTY4NTQzNzk5MiwiZXhwIjoxNjkzMjEzOTkyLCJtciI6dHJ1ZSwid2x0IjoiZjFhNTkwNWYtOTYyMC00NWU1LTlkOTEtZDI1MWMwN2UwYjQyIn0.tQ9Uoi8yy-pKvHS50r3JrTGwcU4K7gtNwzhz8RgVbp_Xo-ZlC1YhHzljHy2cwyfoSPK-i0FOlyXBFAGpccgg3w; agoda.analytics=Id=-617976486265052438&Signature=-5456919403188013299&Expiry=1685605638049; ASP.NET_SessionId=zbfljbiurzwb0w2vg4zeqflq; ycs_session_cache={"Cache":"hkdata1","Time":"638211988382916634","SessionID":"zbfljbiurzwb0w2vg4zeqflq","CheckID":"791ebe1bff1d20f72d8467cc49d8764c38341e73","CType":"N"}'
  };

  https.get(options, (proxyRes) => {
    proxyRes.pipe(res);
  });
});

// Handle POST request to the first API Agoda for Hotel Status
app.post('/hotel-api', (req, res) => {
  const proxyUrl = 'https://ycs.agoda.com/en-us/kipp/api/hotelselectionapi/SearchHotel?';
  const options = url.parse(proxyUrl);

  // Set the necessary headers, including the "Cookie" header
  options.headers = {
    Cookie: 'mycookie',
    'Content-Type': 'application/json',
  };
 
  let requestBody = '';

  req.on('data', (chunk) => {
    requestBody += chunk;
  });

  req.on('end', () => {
    options.method = 'POST';
    options.headers['Content-Length'] = Buffer.byteLength(requestBody);

    const proxyReq = https.request(options, (proxyRes) => {
      proxyRes.pipe(res);
    });

    proxyReq.write(requestBody);
    proxyReq.end();
  });
});

// Handle POST request to the second API Agoda for Update Record
app.post('/post-api', (req, res) => {
  const proxyUrl = 'https://ycs.agoda.com/en-us/39578023/kipp/api/roomtype/UpdateRoomType';
  const options = url.parse(proxyUrl);

  // Set the necessary headers, including the "Cookie" header
  options.headers = {
    Cookie: 'mycookie',
    'Content-Type': 'application/json',
  };

  let requestBody = '';

  req.on('data', (chunk) => {
    requestBody += chunk;
  });

  req.on('end', () => {
    options.method = 'POST';
    options.headers['Content-Length'] = Buffer.byteLength(requestBody);

    const proxyReq = https.request(options, (proxyRes) => {
      proxyRes.pipe(res);
    });

    proxyReq.write(requestBody);
    proxyReq.end();
  });
});

// Handle other requests
app.use((req, res) => {
  res.status(404).send('Not Found');
});

// Start the server
app.listen(port,()=>{
  console.log(`server running ${port}`)
})